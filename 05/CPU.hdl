// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
        // A: first Mux16 sel
        Not(in=instruction[15], out=notOpCode);

        Mux16(a=fromALU, b=instruction, sel=notOpCode, out=instructionOrALU);
        
        // B: ARegister load
        Or(a=instruction[5], b=notOpCode, out=loadRegisterA);

        ARegister(in=instructionOrALU, load=loadRegisterA, out=fromRegisterA, out[0..14]=addressM);
        Mux16(a=fromRegisterA, b=inM, sel=AMSelector, out=AMOut);

        // C: DRegister load
        And(a=instruction[4], b=instruction[15], out=loadRegisterD);

        DRegister(in=fromALU, load=loadRegisterD, out=fromRegisterD);

        // D: ALU Control bits - Nothing special to do here

        ALU(x=fromRegisterD, y=AMOut, 
            zx=instruction[11], 
            nx=instruction[10], 
            zy=instruction[9], 
            ny=instruction[8], 
            f=instruction[7], 
            no=instruction[6], 
            out=fromALU,
            out=outM, 
            zr=zr, 
            ng=ng);

        // E: second Mux16 sel
        And(a=instruction[12], b=instruction[15], out=AMSelector);

        // F: PC load
        // from the ALU
        // zr, if output == 0
        // ng, if output < 0
        
        Not(in=zr, out=notZero);
        Not(in=ng, out=greaterEqualZero);
        Or(a=zr, b=ng, out=lessEqualZero);

        // JGT
        And(a=notZero, b=greaterEqualZero, out=greaterZero);
        And(a=greaterZero, b=instruction[0], out=JGT1);
        And(a=JGT1, b=instruction[15], out=JGT);

        // JEQ
        And(a=zr, b=instruction[1], out=JEQ1);
        And(a=JEQ1, b=instruction[15], out=JEQ);

        // JGE
        And(a=instruction[0], b=instruction[1], out=j01);
        And(a=j01, b=greaterEqualZero, out=JGE1);
        And(a=JGE1, b=instruction[15], out=JGE);
        
        // JLT
        And(a=ng, b=instruction[2], out=JLT1);
        And(a=JLT1, b=instruction[15], out=JLT);

        // JNE
        And(a=instruction[0], b=instruction[2], out=j02);
        And(a=notZero, b=j02, out=JNE1);
        And(a=JNE1, b=instruction[15], out=JNE);
        
        // JLE
        And(a=instruction[1], b=instruction[2], out=j12);
        And(a=lessEqualZero, b=j12, out=JLE1);
        And(a=JLE1, b=instruction[15], out=JLE);
        
        // JMP
        And(a=j01, b=j02, out=JMP1); // all bits are set to 1
        And(a=JMP1, b=instruction[15], out=JMP);


        Or8Way(in[0]=JGT, in[1]=JEQ, in[2]=JGE, in[3]=JLT, in[4]=JNE, in[5]=JLE, in[6]=JMP,in[7]=false, out=loadPC);
        
        PC(in=fromRegisterA, load=loadPC, inc=true, reset=reset, out[0..14]=pc);

        // G: writeM
        And(a=instruction[3], b=instruction[15], out=writeM);
}