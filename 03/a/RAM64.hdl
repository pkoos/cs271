// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    DMux8Way(in=load, sel=address[3..5], a=RAMzero, b=RAMone, c=RAMtwo, d=RAMthree, e=RAMfour, f=RAMfive, g=RAMsix, h=RAMseven);
    
    RAM8(in=in, address=address[0..2], load=RAMzero, out=outZero);
    RAM8(in=in, address=address[0..2], load=RAMone, out=outOne);
    RAM8(in=in, address=address[0..2], load=RAMtwo, out=outTwo);
    RAM8(in=in, address=address[0..2], load=RAMthree, out=outThree);
    RAM8(in=in, address=address[0..2], load=RAMfour, out=outFour);
    RAM8(in=in, address=address[0..2], load=RAMfive, out=outFive);
    RAM8(in=in, address=address[0..2], load=RAMsix, out=outSix);
    RAM8(in=in, address=address[0..2], load=RAMseven, out=outSeven);

    Mux8Way16(a=outZero, b=outOne, c=outTwo, d=outThree, e=outFour, f=outFive, g=outSix, h=outSeven, sel=address[3..5], out=out);
}